# COPY-PASTED FOR NOW
@panel_width_minus_20 = 520			# used to be 440
@panel_width_minus_20_half = 260	# used to be 220
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_half_minus_20 = 250
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types wgf_war_panel_overwrites {
	type war_panel = default_block_window {
		name = "war_panel"
		
		blockoverride "window_header_name"
		{
			raw_text = "#BOLD [WarPanel.GetWar.GetName]#!"
		}
		
		blockoverride "fixed_top" {
			#TABS
			tab_buttons = {
				blockoverride "first_button"
				{
					text = "WAR_PANEL_OVERVIEW"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "WAR_PANEL_OVERVIEW"
				}
				blockoverride "first_button_click"
				{
					onclick = "[InformationPanel.SelectTab('default')]"
					onclick = "[WarPanel.ToggleShowPeaceDeal]"
				}
				blockoverride "first_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected"
				{
					text = "WAR_PANEL_OVERVIEW"
				}
				blockoverride "first_button_name" {
					name = "tutorial_highlight_war_overview_tab"
				}

				blockoverride "second_button"
				{
					text = "WAR_PANEL_PEACE"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "WAR_PANEL_PEACE"
				}
				blockoverride "second_button_click"
				{
					onclick = "[InformationPanel.SelectTab('peace')]"
					onclick = "[WarPanel.ToggleShowPeaceDeal]"
				}
				blockoverride "second_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('peace')]"
				}
				blockoverride "second_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('peace') )]"
				}
				blockoverride "second_button_selected"
				{
					text = "WAR_PANEL_PEACE"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_peace_tab"
				}
			}
		}
		
		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_content_fade
				parentanchor = hcenter
				direction = vertical

				### THE 2 SIDES TOP INFO
				flowcontainer = {
					direction = vertical
					parentanchor = hcenter
					minimumsize = { @panel_width_plus_20 -1 }
					maximumsize = { @panel_width_plus_20 -1 }
					margin = { 10 0 }
					margin_top = 10

					background = {
						fittype = start
						texture = "gfx/interface/illustrations/diplomatic_plays/phase_countdown_to_war_big.dds"
					}
					
					background = {	
						using = light_bg
						margin_right = -280
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_horizontal_left.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					background = {	
						using = dark_area
						margin_left = -280
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_horizontal_right.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					# divider
					vertical_divider_stronger_full = { 
						parentanchor = hcenter
					}

					# top info
					container = {
						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }

						# War icon + support
						widget = {
							size = { @panel_width 60 }
							parentanchor = hcenter
							datacontext = "[WarPanel.GetWar]"
							
							widget = {
								parentanchor = hcenter
								size = { 130 30 }
								position = { -65 17 }

								background = {
									margin = { 5 3 }
									using = fade_left_simple
								}

								textbox= {
									datacontext = "[WarPanel.AccessWar]"
									parentanchor = center
									align = center|nobaseline
									text = "WAR_SUPPORT_LEFT_SIDE"
									tooltip = "WAR_PANEL_LEFT_LEADER_TOOLTIP"
									autoresize = yes
									using = fontsize_large
								}
							}

							widget = {
								parentanchor = hcenter
								size = { 130 30 }
								position = { 65 17 }

								background = {
									margin = { 5 3 }
									using = fade_right_simple
								}

								textbox= {
									datacontext = "[WarPanel.AccessWar]"
									parentanchor = center
									align = center|nobaseline
									autoresize = yes
									text = "WAR_SUPPORT_RIGHT_SIDE"
									tooltip = "WAR_PANEL_RIGHT_LEADER_TOOLTIP"
									using = fontsize_large
								}
							}
							
							icon = {
								texture = "gfx/interface/outliner/war_button_icon.dds"
								size = { 70 60 }
								parentanchor = hcenter
							}
						}

						### Left Side
						war_participant_side = {
							position = { 0 5 }
							blockoverride "parentanchor" {
								parentanchor = left
							}

							blockoverride "side_datacontext"
							{
								datacontext = "[WarPanel.GetWar]"
							}

							blockoverride "side_name" {
								textbox = {
									visible = "[WarPanel.GetLeftLeader.IsLocalPlayer]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = left
									text = "FRONT_YOUR_SIDE"
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetLeftLeader.IsLocalPlayer), WarPanel.GetRightLeader.IsLocalPlayer)]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = left
									text = "FRONT_ENEMY_SIDE"
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetLeftLeader.IsLocalPlayer), Not(WarPanel.GetRightLeader.IsLocalPlayer))]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = left
									text = "FRONT_LEFT_ADJECTIVE_SIDE"
								}
							}

							# Battalions
							blockoverride "side_num_battalions" {

								blockoverride "parentanchor" {
									parentanchor = left|vcenter
								}

								textbox = {
									text = "WAR_LEFT_SIDE_NUM_BATTALIONS"

									tooltip = "WAR_LEFT_SIDE_NUM_BATTALIONS_TOOLTIP"
									using = tooltip_ws

									align = center|nobaseline
									autoresize = yes
								}
							}

							# Flotillas
							blockoverride "side_num_flotillas" {

								blockoverride "parentanchor" {
									parentanchor = left|vcenter
								}

								textbox = {
									text = "WAR_LEFT_SIDE_NUM_FLOTILLAS"

									tooltip = "WAR_LEFT_SIDE_NUM_FLOTILLAS_TOOLTIP"
									using = tooltip_ws

									align = center|nobaseline
									autoresize = yes
								}
							}

							blockoverride "wounded" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = left

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											raw_text = "[concept_wounded]:"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "WAR_LEFT_SIDE_WOUNDED_NUMBER"
											tooltip = "[WarPanel.GetLeftWoundedBreakdown]"
										}
									}
								}
							}

							blockoverride "dead" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = left

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											raw_text = "[concept_dead]:"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "WAR_LEFT_SIDE_DEAD_NUMBER"
											tooltip = "[WarPanel.GetLeftDeadBreakdown]"
										}
									}
								}
							}

							blockoverride "cost_of_war" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = left

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											text = "COST_OF_WAR"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "COST_OF_WAR_LEFT_SIDE_NUMBER"
											tooltip = [WarPanel.GetLeftCostOfWarDesc]
										}
									}
								}
							}
						}

						### Right side
						war_participant_side = {
							position = { 0 5 }
							blockoverride "parentanchor" {
								parentanchor = right
							}

							blockoverride "side_datacontext" {
								datacontext = "[WarPanel.GetWar]"
							}

							blockoverride "side_name" {
								textbox = {
									visible = "[WarPanel.GetRightLeader.IsLocalPlayer]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = right
									text = "FRONT_YOUR_SIDE"
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetRightLeader.IsLocalPlayer), WarPanel.GetLeftLeader.IsLocalPlayer)]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = right
									text = "FRONT_ENEMY_SIDE"
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetRightLeader.IsLocalPlayer), Not(WarPanel.GetLeftLeader.IsLocalPlayer))]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = right
									text = "FRONT_RIGHT_ADJECTIVE_SIDE"
								}
							}

							# Battalions
							blockoverride "side_num_battalions" {

								blockoverride "parentanchor" {
									parentanchor = right|vcenter
								}

								textbox = {
									datacontext = "[WarPanel.GetWar]"
									text = "WAR_RIGHT_SIDE_NUM_BATTALIONS"

									tooltip = "WAR_RIGHT_SIDE_NUM_BATTALIONS_TOOLTIP"
									using = tooltip_ws

									align = center|nobaseline
									autoresize = yes
								}
							}

							# Flotillas
							blockoverride "side_num_flotillas" {

								blockoverride "parentanchor" {
									parentanchor = right|vcenter
								}

								textbox = {
									datacontext = "[WarPanel.GetWar]"
									text = "WAR_RIGHT_SIDE_NUM_FLOTILLAS"

									tooltip = "WAR_RIGHT_SIDE_NUM_FLOTILLAS_TOOLTIP"
									using = tooltip_ws

									align = center|nobaseline
									autoresize = yes
								}
							}

							blockoverride "wounded" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = right

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											raw_text = "[concept_wounded]:"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "WAR_RIGHT_SIDE_WOUNDED_NUMBER"
											tooltip = "[WarPanel.GetRightWoundedBreakdown]"
										}
									}
								}
							}

							blockoverride "dead" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = right

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											raw_text = "[concept_dead]:"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "WAR_RIGHT_SIDE_DEAD_NUMBER"
											tooltip = "[WarPanel.GetRightDeadBreakdown]"
										}
									}
								}
							}

							blockoverride "cost_of_war" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = right

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											text = "COST_OF_WAR"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "COST_OF_WAR_RIGHT_SIDE_NUMBER"
											tooltip = [WarPanel.GetRightCostOfWarDesc]
										}
									}
								}
							}
						}
						
					}
					
					# Present countries
					container = {
						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }
						
						# Left
						war_present_countries_side = {
							parentanchor = left
							
							blockoverride "parentanchor_flag_and_text" {
								parentanchor = left
							}

							blockoverride "datacontext" {
								datacontext = "[WarPanel.GetLeftLeader]"
							}

							blockoverride "right_info" {
								widget = {
									size = { 140 65 }

									background = {
										visible = "[Not(WarPanel.GetLeftLeader.IsLocalPlayer)]"
										using = entry_bg
									}

									flowcontainer = {
										parentanchor = left|vcenter
										direction = vertical

										button = {
											tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
											using = default_button
											parentanchor = left
											visible = "[WarPanel.GetLeftLeader.IsLocalPlayer]"
											size = { 140 25 }
											onclick = "[InformationPanelBar.OpenMilitaryPanelTab('army')]"
											using = fontsize_large

											textbox = {
												margin_left = 10
												text = "WAR_LEADER_LEFT_NUM_BATTALIONS"
												align = center|nobaseline
												autoresize = yes
												parentanchor = left
												alpha = "[TransparentIfFalse(WarPanel.GetLeftLeader.IsMobilized)]"
											}
										}

										button = {
											tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
											using = default_button
											parentanchor = left
											visible = "[WarPanel.GetLeftLeader.IsLocalPlayer]"
											size = { 140 25 }
											onclick = "[InformationPanelBar.OpenMilitaryPanelTab('navy')]"
											using = fontsize_large

											textbox = {
												margin_left = 10
												text = "WAR_LEADER_LEFT_NUM_FLOTILLAS"
												align = center|nobaseline
												autoresize = yes
												parentanchor = left
											}
										}

										textbox = {
											visible = "[Not(WarPanel.GetLeftLeader.IsLocalPlayer)]"
											tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
											datacontext = "[WarPanel.GetWar]"
											margin_left = 10
											parentanchor = left
											text = "WAR_LEADER_LEFT_NUM_BATTALIONS"
											align = center|nobaseline
											autoresize = yes
											alpha = "[TransparentIfFalse(WarPanel.GetLeftLeader.IsMobilized)]"
										}

										textbox = {
											visible = "[Not(WarPanel.GetLeftLeader.IsLocalPlayer)]"
											tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
											datacontext = "[WarPanel.GetWar]"
											margin_left = 10
											parentanchor = left
											text = "WAR_LEADER_LEFT_NUM_FLOTILLAS"
											align = center|nobaseline
											autoresize = yes
										}
									}
								}
							}

							blockoverride "header" {
								textbox = {
									visible = "[WarPanel.GetLeftLeader.IsLocalPlayer]"
									text = "WAR_ALLIES"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetLeftLeader.IsLocalPlayer), WarPanel.GetRightLeader.IsLocalPlayer)]"
									text = "WAR_ENEMIES"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetLeftLeader.IsLocalPlayer), Not(WarPanel.GetRightLeader.IsLocalPlayer))]"
									datacontext = "[WarPanel.GetLeftLeader]"
									text = "WAR_INITIATOR_ALLIES"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
							}

							blockoverride "parentanchor_allies" {
								parentanchor = left
							}

							blockoverride "datamodel" {
								datamodel = "[WarPanel.GetLeftWarParticipantsExcludingLeader]"
							}

							blockoverride "visibility_allies_empty_state" {
								visible = "[LessThan_int32(GetDataModelSize(WarPanel.GetLeftWarParticipantsExcludingLeader), '(int32)1')]"
							}
						}

						# Right
						war_present_countries_side = {
							parentanchor = right
							
							blockoverride "parentanchor" {
								parentanchor = right
							}

							blockoverride "parentanchor_flag_and_text" {
								parentanchor = right
							}

							blockoverride "datacontext" {
								datacontext = "[WarPanel.GetRightLeader]"
							}

							blockoverride "left_info" {
								widget = {
									size = { 140 65 }

									background = {
										using = entry_bg
									}

									flowcontainer = {
										parentanchor = vcenter
										direction = vertical

										textbox = {
											tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
											margin_left = 10
											text = "WAR_LEADER_RIGHT_NUM_BATTALIONS"
											align = center|nobaseline
											autoresize = yes
											alpha = "[TransparentIfFalse(WarPanel.GetRightLeader.IsMobilized)]"
										}

										textbox = {
											tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
											margin_left = 10
											text = "WAR_LEADER_RIGHT_NUM_FLOTILLAS"
											align = center|nobaseline
											autoresize = yes
										}
									}
								}
							}

							blockoverride "header" {
								textbox = {
									visible = "[WarPanel.GetRightLeader.IsLocalPlayer]"
									text = "WAR_ALLIES"
									align = left|nobaseline
									parentanchor = right
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetRightLeader.IsLocalPlayer), WarPanel.GetLeftLeader.IsLocalPlayer)]"
									text = "WAR_ENEMIES"
									align = left|nobaseline
									parentanchor = right
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetRightLeader.IsLocalPlayer), Not(WarPanel.GetLeftLeader.IsLocalPlayer))]"
									datacontext = "[WarPanel.GetRightLeader]"
									text = "WAR_TARGET_ALLIES"
									align = left|nobaseline
									parentanchor = right
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
							}

							blockoverride "parentanchor_war_leader_header" {
								parentanchor = right
							}

							blockoverride "visibility_you_tag" {
								visible = "[WarPanel.GetRightLeader.IsLocalPlayer]"
							}

							blockoverride "datamodel" {
								datamodel = "[WarPanel.GetRightWarParticipantsExcludingLeader]"
							}

							blockoverride "parentanchor_allies" {
								layoutanchor = topright
								parentanchor = right
							}

							blockoverride "parentanchor_allies_empty_state" {
								parentanchor = right
							}

							blockoverride "visibility_allies_empty_state" {
								visible = "[LessThan_int32(GetDataModelSize(WarPanel.GetRightWarParticipantsExcludingLeader), '(int32)1')]"
							}
						}
					}
				}

				### NAVAL INVASIONS
				flowcontainer = {
					visible = "[Not(IsDataModelEmpty(WarPanel.AccessWar.GetActiveNavalInvasions))]"
					spacing = 10
					direction = vertical
					parentanchor = hcenter
					margin = { 0 10 }

					datamodel = "[WarPanel.AccessWar.GetActiveNavalInvasions]"

					item = {
						naval_invasion_list_item = {}
					}
				}

				### BATTLES
				default_header = {
					blockoverride "text" {
						text = "ACTIVE_BATTLES"
					}
					parentanchor = hcenter
					visible = "[Not(IsDataModelEmpty(WarPanel.AccessWar.GetActiveBattles))]"
				}

				flowcontainer = {
					spacing = 10
					direction = vertical
					parentanchor = hcenter
					margin = { 0 10 }

					datamodel = "[WarPanel.AccessWar.GetActiveBattles]"

					item = {
						battle_item = {}
					}
				}

				section_header_button = {
					blockoverride "left_text" {
						text = "ACTIVE_FRONTS"
					}

					blockoverride "right_text" {
						expand = {}
						textbox = {
							margin_right = 10
							align = right|nobaseline
							autoresize = yes
							text = "[GetDataModelSize(WarPanel.AccessFronts)]"
							using = fontsize_large
						}
					}

					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('war_fronts_list')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[GetVariableSystem.Exists('war_fronts_list')]"
					}

					blockoverride "onclick_showless" {
						visible = "[Not(GetVariableSystem.Exists('war_fronts_list'))]"
					}
				}

				flowcontainer = {
					visible = "[Not(GetVariableSystem.Exists('war_fronts_list'))]"
					parentanchor = hcenter
					sort_button = {
						size = { @panel_width_half 30 }
						text = "concept_battalions"
						onclick = "[WarPanel.SortFronts('total_number_of_units')]"
					}
					sort_button = {
						size = { @panel_width_half 30 }
						text = "FRONT_MAP_LIST_PANEL_ADVANTAGE"
						onclick = "[WarPanel.SortFronts('advantage')]"
					}
				}

				flowcontainer = {
					visible = "[Not(GetVariableSystem.Exists('war_fronts_list'))]"
					spacing = 10
					direction = vertical
					parentanchor = hcenter
					margin_bottom = 10

					datamodel = "[WarPanel.AccessFronts]"

					item = {
						front_list_item = {}
					}

					empty_state = {
						blockoverride "visible" {
							visible = "[IsDataModelEmpty(WarPanel.AccessFronts)]"
						}
						blockoverride "text" {
							text = "NO_ACTIVE_FRONTS"
						}
					}
				}

				section_header_button = {
					visible = "[Not(IsDataModelEmpty(WarPanel.AccessWar.GetEndedBattles))]"
					blockoverride "left_text" {
						text = "ENDED_BATTLES"
					}

					blockoverride "right_text" {
						expand = {}
						textbox = {
							margin_right = 10
							align = right|nobaseline
							autoresize = yes
							text = "[GetDataModelSize(WarPanel.AccessWar.GetEndedBattles)]"
							using = fontsize_large
						}
					}

					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('war_ended_battles_list')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[GetVariableSystem.Exists('war_ended_battles_list')]"
					}

					blockoverride "onclick_showless" {
						visible = "[Not(GetVariableSystem.Exists('war_ended_battles_list'))]"
					}
				}

				flowcontainer = {
					visible = "[Not(GetVariableSystem.Exists('war_ended_battles_list'))]"
					direction = vertical
					parentanchor = hcenter
					margin_bottom = 10
					spacing = 10

					datamodel = "[WarPanel.AccessWar.GetEndedBattles]"

					item = {
						ended_battle_item = {}
					}
				}
			}
			
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('peace')]"
				using = default_content_fade
				using = default_list_position
				direction = vertical
				spacing = 10
				minimumsize = { @panel_width_plus_20 -1 }

				widget = { size = { 0 0 } }

				### CURRENT PEACE DEAL HEADER
				default_header = {
					parentanchor = hcenter
					blockoverride "text" {
						text = "WAR_PANEL_CURRENT_PEACE_DEAL"
					}
				}			

				textbox = {
					visible = "[Not(WarPanel.GetWar.HasActivePeaceDeal)]"
					autoresize = yes
					parentanchor = hcenter
					using = fontsize_xxl
					using = empty_state_text_properties
					text = "WAR_PANEL_NO_CURRENT_PEACE_DEAL"
				}	
				
				widget = { 
					visible = "[Not(WarPanel.GetWar.HasActivePeaceDeal)]"
					size = { 10 10 } 
				}	

				### PROPOSE PEACE DEAL HEADER
				default_header = {
					visible = "[Not(WarPanel.GetWar.HasActivePeaceDeal)]"
					parentanchor = hcenter
					blockoverride "text" {
						text = "WAR_PANEL_PROPOSE_PEACE_DEAL"
					}
				}

				flowcontainer = {
					direction = vertical
					parentanchor = hcenter
					minimumsize = { @panel_width_minus_20 -1 }

					using = entry_bg_fancy

					flowcontainer = {
						parentanchor = hcenter
						direction = vertical
						spacing = 5
						margin = { 10 0 }
						margin_bottom = 10

						background = {
							visible = "[WarPanel.GetWar.HasActivePeaceDeal]"
							using = dark_area
							using = frame_small_mask_top
							alpha = 0.3
						}

						widget = {
							visible = "[WarPanel.GetWar.HasActivePeaceDeal]"
							size = { 100% 45 }
							parentanchor = hcenter

							background = {
								using = fade_top_entry_header_colored
								color = "[WarPanel.GetWar.GetCountryProposingPeace.GetMapColor]"
							}

							textbox = {
								autoresize = yes
								parentanchor = center
								align = nobaseline
								using = fontsize_large
								text = "WAR_PANEL_CURRENT_PEACE_DEAL_PROPOSER"
							}
						}

						textbox = {
							visible = "[Or(WarPanel.GetWar.HasActiveWhitePeaceDeal, WarPanel.GetWar.HasProposedWhitePeaceDeal(GetPlayer))]"
							autoresize = yes
							parentanchor = hcenter
							using = fontsize_large
							text = "WAR_PANEL_WHITE_PEACE"
							default_format = "#b"
						}

						widget = {
							visible = "[Not(WarPanel.GetWar.HasActiveWhitePeaceDeal)]"
							size = { 5 5 }
						}

						### PRESSED WARGOALS
						textbox = {
							autoresize = yes
							parentanchor = hcenter
							align = nobaseline
							text = "PRESSED_WAR_GOALS"
						}
						
						### PRESSED WARGOALS - No active peace deal
						container = {
							visible = "[Not(WarPanel.GetWar.HasActivePeaceDeal)]"
							parentanchor = hcenter
							minimumsize = { @panel_width_minus_20 -1 }
							
							### CENTER DIVIDER
							vertical_divider = {
								parentanchor = hcenter
							}
							
							flowcontainer = {
								parentanchor = hcenter
								direction = vertical
								spacing = 20
								
								### PRESSED WARGOALS
								container = {
									minimumsize = { @panel_width_minus_20 -1 }
								
									### ATTACKERS
									flowcontainer = {
										position = { 0 5 }
										parentanchor = left
										direction = vertical
										datacontext = "[WarPanel.AccessWar]"
										minimumsize = { @panel_width_half_minus_20 -1 }

										empty_state = {
											blockoverride "visible" {
												visible = no
												#does not work as we need to check for only pressed war goals - PRCAL-21770
												#visible "[IsDataModelEmpty(WarPanel.AccessAttackersPotentialPressedWarGoals)]"
											}
											blockoverride "text" {
												text = "NO_UNPRESSED_WAR_GOALS"
											}
											blockoverride "size" {
												minimumsize = { @panel_width_half_minus_20 -1 }
												maximumsize = { @panel_width_half_minus_20 -1 }
											}
											blockoverride "fontsize" {
												using = fontsize_large
											}
										}

										dynamicgridbox = {
											using = default_list_position
											name = "attacker_wargoal_list"
											datamodel = "[WarPanel.AccessAttackersWarGoals]"

											item = {
												wargoal_item = {
													visible = "[WarGoal.IsPressedInShownPeaceDeal(GetPlayer)]" # todo PRCAL-21770 - Remove this visible state
													datacontext = "[WarGoalPanelPair.AccessWarGoal]"
												}
											}
										}

										wgf_pressed_war_goal_list = {
											visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, WarPanel.AccessWar.AccessAttackerLeaderParticipant.GetCountry.MakeScope)]"
										}
									}

									### DEFENDERS
									flowcontainer = {
										position = { 0 5 }
										parentanchor = right
										direction = vertical
										datacontext = "[WarPanel.AccessWar]"
										minimumsize = { @panel_width_half_minus_20 -1 }

										empty_state = {
											blockoverride "visible" {
												visible = no
												#does not work as we need to check for only pressed war goals - PRCAL-21770
												#visible "[IsDataModelEmpty(WarPanel.AccessDefendersPotentialPressedWarGoals)]"
											}
											blockoverride "text" {
												text = "NO_PRESSED_WAR_GOALS"
											}
											blockoverride "size" {
												minimumsize = { @panel_width_half_minus_20 -1 }
												maximumsize = { @panel_width_half_minus_20 -1 }
											}
											blockoverride "fontsize" {
												using = fontsize_large
											}
										}

										dynamicgridbox = {
											using = default_list_position
											name = "defender_wargoal_list"
											datamodel = "[WarPanel.AccessDefendersWarGoals]"

											item = {
												wargoal_item = {
													visible = "[WarGoal.IsPressedInShownPeaceDeal(GetPlayer)]" # todo PRCAL-21770 - Remove this visible state
													datacontext = "[WarGoalPanelPair.AccessWarGoal]"
												}
											}
										}

										wgf_pressed_war_goal_list = {
											visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, WarPanel.AccessWar.AccessDefenderLeaderParticipant.GetCountry.MakeScope)]"
										}
									}
								}
							}
						}

						### PRESSED WARGOALS - Active peace deal
						container = {
							visible = "[WarPanel.GetWar.HasActivePeaceDeal]"
							parentanchor = hcenter
							minimumsize = { @panel_width_minus_20 -1 }
							
							### CENTER DIVIDER
							vertical_divider = {
								parentanchor = hcenter
							}
							
							flowcontainer = {
								parentanchor = hcenter
								direction = vertical
								spacing = 20
								
								### PRESSED WARGOALS
								container = {
									minimumsize = { @panel_width_minus_20 -1 }
								
									### ATTACKERS
									flowcontainer = {
										position = { 0 5 }
										parentanchor = left
										direction = vertical
										datacontext = "[WarPanel.AccessWar]"
										minimumsize = { @panel_width_half_minus_20 -1 }

										empty_state = {
											blockoverride "visible" {
												visible = no
												#does not work as we need to check for only pressed war goals - PRCAL-21770
												#visible "[IsDataModelEmpty(WarPanel.AccessAttackersCurrentPressedWarGoals)]"
											}
											blockoverride "text" {
												text = "NO_UNPRESSED_WAR_GOALS"
											}
											blockoverride "size" {
												minimumsize = { @panel_width_half_minus_20 -1 }
												maximumsize = { @panel_width_half_minus_20 -1 }
											}
											blockoverride "fontsize" {
												using = fontsize_large
											}
										}

										dynamicgridbox = {
											using = default_list_position
											name = "attacker_wargoal_list"
											datamodel = "[WarPanel.AccessAttackersWarGoals]"

											item = {
												wargoal_item = {
													visible = "[WarGoal.IsPressedInShownPeaceDeal(GetPlayer)]" # todo PRCAL-21770 - Remove this visible state
													datacontext = "[WarGoalPanelPair.AccessWarGoal]"
												}
											}
										}

										wgf_pressed_war_goal_list = {
											visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, WarPanel.AccessWar.AccessAttackerLeaderParticipant.GetCountry.MakeScope)]"
										}
									}

									### DEFENDERS
									flowcontainer = {
										position = { 0 5 }
										parentanchor = right
										direction = vertical
										datacontext = "[WarPanel.AccessWar]"
										minimumsize = { @panel_width_half_minus_20 -1 }

										empty_state = {
											blockoverride "visible" {
												visible = no
												#does not work as we need to check for only pressed war goals - PRCAL-21770
												#visible "[IsDataModelEmpty(WarPanel.AccessDefendersCurrentPressedWarGoals)]"
											}
											blockoverride "text" {
												text = "NO_PRESSED_WAR_GOALS"
											}
											blockoverride "size" {
												minimumsize = { @panel_width_half_minus_20 -1 }
												maximumsize = { @panel_width_half_minus_20 -1 }
											}
											blockoverride "fontsize" {
												using = fontsize_large
											}
										}

										dynamicgridbox = {
											using = default_list_position
											name = "defender_wargoal_list"
											datamodel = "[WarPanel.AccessDefendersWarGoals]"

											item = {
												wargoal_item = {
													visible = "[WarGoal.IsPressedInShownPeaceDeal(GetPlayer)]" # todo PRCAL-21770 - Remove this visible state
													datacontext = "[WarGoalPanelPair.AccessWarGoal]"
												}
											}
										}

										wgf_pressed_war_goal_list = {
											visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, WarPanel.AccessWar.AccessDefenderLeaderParticipant.GetCountry.MakeScope)]"
										}
									}
								}
							}
						}

						### UNPRESSED WARGOALS
						textbox = {
							autoresize = yes
							parentanchor = hcenter
							align = nobaseline
							text = "UNPRESSED_WAR_GOALS"
						}
						
						### UNPRESSED WARGOALS - No active peace deal
						container = {
							visible = "[Not(WarPanel.GetWar.HasActivePeaceDeal)]"
							parentanchor = hcenter
							minimumsize = { @panel_width_minus_20 -1 }
							
							### CENTER DIVIDER
							vertical_divider = {
								parentanchor = hcenter
							}
							
							flowcontainer = {
								parentanchor = hcenter
								direction = vertical
								spacing = 20

								container = {
									minimumsize = { @panel_width_minus_20 -1 }
								
									### ATTACKERS
									flowcontainer = {
										position = { 0 5 }
										parentanchor = left
										direction = vertical
										datacontext = "[WarPanel.AccessWar]"
										minimumsize = { @panel_width_half_minus_20 -1 }
										maximumsize = { @panel_width_half_minus_20 -1 }

										empty_state = {
											blockoverride "visible" {
												visible = no
												#does not work as we need to check for only unpressed war goals - PRCAL-21770
												#visible "[IsDataModelEmpty(WarPanel.AccessAttackersPotentialUnpressedWarGoals)]"
											}
											blockoverride "text" {
												text = "NO_UNPRESSED_WAR_GOALS"
											}
											blockoverride "size" {
												minimumsize = { @panel_width_half_minus_20 -1 }
												maximumsize = { @panel_width_half_minus_20 -1 }
											}
											blockoverride "fontsize" {
												using = fontsize_large
											}
										}
										
										dynamicgridbox = {
											using = default_list_position
											name = "attacker_wargoal_list"
											datamodel = "[WarPanel.AccessAttackersWarGoals]"
											#datamodel = "[WarPanel.AccessAttackersPotentialUnpressedWarGoals]" - # todo PRCAL-21770

											item = {
												wargoal_item = {
													visible = "[Not(WarGoal.IsPressedInShownPeaceDeal(GetPlayer))]" # todo PRCAL-21770 - Remove this visible state
													datacontext = "[WarGoalPanelPair.AccessWarGoal]"
												}
											}
										}

										wgf_unpressed_war_goal_list = {
											visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, WarPanel.AccessWar.AccessAttackerLeaderParticipant.GetCountry.MakeScope)]"
										}
									}

									### DEFENDERS
									flowcontainer = {
										position = { 0 5 }
										parentanchor = right
										direction = vertical
										datacontext = "[WarPanel.AccessWar]"
										minimumsize = { @panel_width_half -1 }

										empty_state = {
											blockoverride "visible" {
												visible = no
												#does not work as we need to check for only unpressed war goals - PRCAL-21770
												#visible "[IsDataModelEmpty(WarPanel.AccessDefendersPotentialUnpressedWarGoals)]"
											}
											blockoverride "text" {
												text = "NO_UNPRESSED_WAR_GOALS"
											}
											blockoverride "size" {
												minimumsize = { @panel_width_half -1 }
												maximumsize = { @panel_width_half -1 }
											}
											blockoverride "fontsize" {
												using = fontsize_large
											}
										}
										
										dynamicgridbox = {
											using = default_list_position
											name = "defender_wargoal_list"
											datamodel = "[WarPanel.AccessDefendersWarGoals]"
											#datamodel = "[WarPanel.AccessDefendersPotentialUnpressedWarGoals]" - # todo PRCAL-21770

											item = {
												wargoal_item = {
													datacontext = "[WarGoalPanelPair.AccessWarGoal]"
													visible = "[Not(WarGoal.IsPressedInShownPeaceDeal(GetPlayer))]" # todo PRCAL-21770 - Remove this visible state
												}
											}
										}

										wgf_unpressed_war_goal_list = {
											visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, WarPanel.AccessWar.AccessDefenderLeaderParticipant.GetCountry.MakeScope)]"
										}
									}
								}
							}
						}

						### UNPRESSED WARGOALS - Active peace deal
						container = {
							visible = "[WarPanel.GetWar.HasActivePeaceDeal]"
							parentanchor = hcenter
							minimumsize = { @panel_width_minus_20 -1 }
							
							### CENTER DIVIDER
							vertical_divider = {
								parentanchor = hcenter
							}
							
							flowcontainer = {
								parentanchor = hcenter
								direction = vertical
								spacing = 20

								container = {
									minimumsize = { @panel_width_minus_20 -1 }
								
									### ATTACKERS
									flowcontainer = {
										position = { 0 5 }
										parentanchor = left
										direction = vertical
										datacontext = "[WarPanel.AccessWar]"
										minimumsize = { @panel_width_half_minus_20 -1 }
										maximumsize = { @panel_width_half_minus_20 -1 }

										empty_state = {
											blockoverride "visible" {
												visible = no
												#does not work as we need to check for only unpressed war goals - PRCAL-21770
												#visible "[IsDataModelEmpty(WarPanel.AccessAttackersCurrentUnpressedWarGoals)]"
											}
											blockoverride "text" {
												text = "NO_UNPRESSED_WAR_GOALS"
											}
											blockoverride "size" {
												minimumsize = { @panel_width_half_minus_20 -1 }
												maximumsize = { @panel_width_half_minus_20 -1 }
											}
											blockoverride "fontsize" {
												using = fontsize_large
											}
										}
										
										dynamicgridbox = {
											using = default_list_position
											name = "attacker_wargoal_list"
											datamodel = "[WarPanel.AccessAttackersWarGoals]"
											#datamodel = "[WarPanel.AccessAttackersCurrentUnpressedWarGoals]" - # todo PRCAL-21770

											item = {
												wargoal_item = {
													visible = "[Not(WarGoal.IsPressedInShownPeaceDeal(GetPlayer))]" # todo PRCAL-21770 - Remove this visible state
													datacontext = "[WarGoalPanelPair.AccessWarGoal]"
												}
											}
										}

										wgf_unpressed_war_goal_list = {
											visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, WarPanel.AccessWar.AccessAttackerLeaderParticipant.GetCountry.MakeScope)]"
										}
									}

									### DEFENDERS
									flowcontainer = {
										position = { 0 5 }
										parentanchor = right
										direction = vertical
										datacontext = "[WarPanel.AccessWar]"
										minimumsize = { @panel_width_half -1 }

										empty_state = {
											blockoverride "visible" {
												visible = no
												#does not work as we need to check for only unpressed war goals - PRCAL-21770
												#visible "[IsDataModelEmpty(WarPanel.AccessDefendersCurrentUnpressedWarGoals)]"
											}
											blockoverride "text" {
												text = "NO_UNPRESSED_WAR_GOALS"
											}
											blockoverride "size" {
												minimumsize = { @panel_width_half -1 }
												maximumsize = { @panel_width_half -1 }
											}
											blockoverride "fontsize" {
												using = fontsize_large
											}
										}
										
										dynamicgridbox = {
											using = default_list_position
											name = "defender_wargoal_list"
											datamodel = "[WarPanel.AccessDefendersWarGoals]"
											#datamodel = "[WarPanel.AccessDefendersCurrentUnpressedWarGoals]" - # todo PRCAL-21770

											item = {
												wargoal_item = {
													datacontext = "[WarGoalPanelPair.AccessWarGoal]"
													visible = "[Not(WarGoal.IsPressedInShownPeaceDeal(GetPlayer))]" # todo PRCAL-21770 - Remove this visible state
												}
											}
										}

										wgf_unpressed_war_goal_list = {
											visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, WarPanel.AccessWar.AccessDefenderLeaderParticipant.GetCountry.MakeScope)]"
										}
									}
								}
							}
						}
					}

					flowcontainer = {
						visible = "[And(WarPanel.GetWar.HasActivePeaceDeal, WarPanel.GetWar.MustRatifyPeaceDeal( GetPlayer.Self ))]"
						parentanchor = hcenter
						direction = vertical
						minimumsize = { @panel_width_minus_10 -1 }
						margin = { 10 10 }
						spacing = 10
						datacontext = "[WarPanel.GetWar]"

						background = {
							using = dark_area
							alpha = 0.5
						}

						textbox = {
							parentanchor = hcenter
							autoresize = yes
							align = nobaseline
							text = "DO_COUNTRY_ACCEPT_THIS_PEACE_DEAL"
						}

						flowcontainer = {
							parentanchor = hcenter
							spacing = 10

							flowcontainer = {
								direction = vertical

								button = {
									visible = "[War.WouldAcceptActivePeaceDeal( GetPlayer.Self )]"
									size = { 250 50 }
									using = default_button_action
									onclick = "[Execute( War.ToggleAcceptPeace( GetPlayer.Self ) )]"
									using = tooltip_above
									tooltip = "REJECTING_PEACE_DEAL_TOOLTIP"

									flowcontainer = {
										parentanchor = vcenter
										spacing = 7
										position = { 15 0 }

										icon = {
											size = { 30 30 }
											texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
										}

									}

									textbox = {
										parentanchor = center
										using = fontsize_large
										autoresize = yes
										align = nobaseline
										text = "REJECT"
									}
								}

								widget = {
									visible = "[Not(War.WouldAcceptActivePeaceDeal( GetPlayer.Self ))]"
									size = { 250 50 }
									using = tooltip_above
									tooltip = "CURRENTLY_REJECTING_PEACE_DEAL_TOOLTIP"

									background = {
										using = paper_bg
									}

									flowcontainer = {
										parentanchor = vcenter
										spacing = 7
										position = { 15 0 }

										icon = {
											size = { 30 30 }
											texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
										}
									}

									textbox = {
										parentanchor = center
										using = fontsize_large
										autoresize = yes
										align = nobaseline
										text = "REJECT"
									}

									icon = {
										using = highlighted_square_selection
									}
								}
							}

							flowcontainer = {
								direction = vertical

								button = {
									visible = "[Not(War.WouldAcceptActivePeaceDeal( GetPlayer.Self ))]"
									size = { 250 50 }
									using = default_button_action
									onclick = "[Execute( War.ToggleAcceptPeace( GetPlayer.Self ) )]"
									tooltip = "ACCEPTING_PEACE_DEAL_TOOLTIP"

									flowcontainer = {
										parentanchor = vcenter
										spacing = 7
										position = { 15 0 }

										icon = {
											size = { 30 30 }
											texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
										}
									}

									textbox = {
										parentanchor = center
										using = fontsize_large
										autoresize = yes
										align = nobaseline
										text = "ACCEPT"
									}
								}

								widget = {
									visible = "[War.WouldAcceptActivePeaceDeal( GetPlayer.Self )]"
									size = { 250 50 }
									tooltip = "CURRENTLY_ACCEPTING_PEACE_DEAL_TOOLTIP"

									background = {
										using = paper_bg
									}

									flowcontainer = {
										parentanchor = vcenter
										spacing = 7
										position = { 15 0 }

										icon = {
											size = { 30 30 }
											texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
										}
									}

									textbox = {
										parentanchor = center
										using = fontsize_large
										autoresize = yes
										align = nobaseline
										text = "ACCEPT"
									}

									icon = {
										using = highlighted_square_selection
									}
								}
							}
						}

						textbox = {
							parentanchor = hcenter
							autoresize = yes
							align = nobaseline
							text = "DAYS_UNTIL_PEACE_DEAL_FAILS"
						}
					}	
				}
				
				### NEGOTIATORS
				container = {
					parentanchor = hcenter
					datacontext = "[WarPanel.AccessWar]"
					minimumsize = { @panel_width -1 }
					
					flowcontainer = {
						name = "attacker_list"
						position = { 5 0 }
						parentanchor = left
						datamodel = "[War.AccessAttackers]"
						direction = vertical
						spacing = 5
						margin_bottom = 10

						item = {
							war_participant_item = {
								visible = "[WarParticipant.IsPeaceNegotiator]"
							}
						}
					}

					vertical_divider = {
						parentanchor = center
					}

					flowcontainer = {
						name = "defender_list"
						position = { -5 0 }
						parentanchor = right
						datamodel = "[War.AccessDefenders]"
						direction = vertical
						spacing = 5
						margin_bottom = 10

						item = {
							war_participant_item = {
								visible = "[WarParticipant.IsPeaceNegotiator]"
							}
						}
					}
				}				

				section_header_button = {
					#visible = "[And(Not(IsDataModelEmpty( War.AccessAttackers )), Not(IsDataModelEmpty( War.AccessDefenders )))]"
					
					blockoverride "left_text" {
						text = "NON_NEGOTIATORS"
					}
					
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('non-negotiators')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists('non-negotiators'))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists('non-negotiators')]"
					}
				}

				### NON-NEGOTIATORS
				container = {
					visible = "[GetVariableSystem.Exists('non-negotiators')]"
					datacontext = "[WarPanel.AccessWar]"
					minimumsize = { @panel_width_plus_20 -1 }
					
					flowcontainer = {
						name = "attacker_list"
						position = { 10 0 }
						parentanchor = left
						datamodel = "[War.AccessAttackers]"
						direction = vertical
						spacing = 5
						margin_bottom = 10

						item = {
							war_participant_item = {
								visible = "[Not(WarParticipant.IsPeaceNegotiator)]"
							}
						}
					}
					flowcontainer = {
						name = "defender_list"
						position = { -10 0 }
						parentanchor = right
						datamodel = "[War.AccessDefenders]"
						direction = vertical
						spacing = 5
						margin_bottom = 10

						item = {
							war_participant_item = {
								visible = "[Not(WarParticipant.IsPeaceNegotiator)]"
							}
						}
					}
				}				
			}
		}
		
		### FIXED BOTTOM AREA
		blockoverride "fixed_bottom"
		{
			divider_decorative = {
				blockoverride "size" {
					size =  { @panel_width_plus_20 6 }
				}
			}

			fixed_bottom_spacer = {}
			
			flowcontainer = {
				direction = vertical
				visible = "[InformationPanel.IsTabSelected('peace')]"										
				
				### PROPOSE PEACE
				widget = {
					size = { 535 60 }
					visible = "[WarPanel.GetWar.IsWarLeader( GetPlayer.Self )]"
					tooltip = "WAR_PANEL_PROPOSE_PEACE_TOOLTIP"
					
					button = {
						using = default_button
						text = "WAR_PANEL_PROPOSE_PEACE"
						size = { 520 50 }
						parentanchor = center
						using = fontsize_large
						onclick = "[Execute( WarPanel.GetWar.ProposePeaceDeal( GetPlayer.Self ) )]"
						enabled = "[IsValid( WarPanel.GetWar.ProposePeaceDeal( GetPlayer ))]"
					}
					checkbutton = {
						size = { 60 60 }
						alwaystransparent = yes
						parentanchor = vcenter
						texture = "gfx/interface/buttons/button_icons/thumbsupdown.dds"
						framesize = { 116 116 }
						checked = "[WarPanel.GetWar.WouldProposedPeaceDealBeAccepted( GetPlayer.Self ) ]"
					}					
				}	

				### WHITE PEACE
				widget = {
					size = { 535 60 }
					visible = "[WarPanel.GetWar.IsWarLeader( GetPlayer.Self )]"
					tooltip = "WAR_PANEL_SET_WHITE_PEACE_TOOLTIP"
					
					button = {
						using = default_button
						text = "WAR_PANEL_SET_WHITE_PEACE"
						size = { 520 50 }
						parentanchor = center
						using = fontsize_large
						onclick = "[Execute( WarPanel.GetWar.SetWhitePeace( GetPlayer.Self ) )]"
						enabled = "[IsValid( WarPanel.GetWar.SetWhitePeace( GetPlayer.Self ) )]"
					}
					checkbutton = {
						size = { 60 60 }
						alwaystransparent = yes
						parentanchor = vcenter
						texture = "gfx/interface/buttons/button_icons/thumbsupdown.dds"
						framesize = { 116 116 }
						checked = "[WarPanel.GetWar.WouldWhitePeaceDealBeAccepted]"
					}					
				}					
				
				### CAPITULATE
				widget = {
					size = { 535 60 }
					visible = "[WarPanel.GetWar.IsParticipant( GetPlayer.Self )]"
					tooltip = "WAR_PANEL_CAPITULATE_TOOLTIP"
					
					button = {
						using = default_button
						text = "WAR_PANEL_CAPITULATE"
						size = { 520 50 }
						parentanchor = center
						using = fontsize_large
						onclick = "[PopupManager.AskConfirmation( WarPanel.GetWar.Capitulate( GetPlayer.Self ) )]"
						enabled = "[IsValid( WarPanel.GetWar.Capitulate( GetPlayer.Self ) )]"
					}
					icon = {
						size = { 60 60 }
						texture = "gfx/interface/backgrounds/round_button_bg.dds"
						alwaystransparent = yes
						parentanchor = vcenter
						
						icon = {
							texture = "gfx/interface/icons/generic_icons/capitulate.dds"
							size = { 45 45 }
							alwaystransparent = yes
							parentanchor = center
						}
					}
				}
							
			}
		
			widget = { size = { 1 10 }}
		}
	}

	### Custom CHECKMARK ANIMATION
	type wgf_wargoal_checkmark = icon {
		texture = "gfx/interface/icons/generic_icons/checkmark.dds"
		visible = "[ScriptedGui.IsShown(GuiScope
							.SetRoot(DiplomaticPlay.MakeScope)
							.AddScope('war_goal', BuildingType.MakeScope)
							.AddScope('target', DiplomaticPlay.GetTarget.MakeScope)
							.AddScope('initiator', DiplomaticPlay.GetInitiator.MakeScope)
							.End
						)]"
		size = { 45 45 }
		block "position" {
			position = { -15 15 }
		}
		alwaystransparent = yes
		parentanchor = right
		widgetanchor = center
		scale = 0.7

		state = {
			name = _show
			next = a
			scale = 0.7
			duration = 0
		}
		state = {
			name = a
			next = b
			scale = 1
			duration = 0.05
			using = Animation_Curve_Default
		}
		state = {
			name = b
			scale = 0.7
			duration = 0.1
			using = Animation_Curve_Default
		}

		using = shimmer
	}

	type wgf_unpressed_war_goal_list = dynamicgridbox {
		using = default_list_position
		datacontext = "[WarPanel.AccessWar.AccessDiplomaticPlay]"
		datamodel = "[DiplomaticPlay.MakeScope.GetList('wgf_active_war_goals')]"

		block "visiblity" {
			visible = no
		}

		item = {
			wgf_wargoal_item = {
				visible = "[Not(ScriptedGui.IsShown(GuiScope
								.SetRoot(DiplomaticPlay.MakeScope)
								.AddScope('war_goal', BuildingType.MakeScope)
								.AddScope('target', DiplomaticPlay.GetTarget.MakeScope)
								.AddScope('initiator', DiplomaticPlay.GetInitiator.MakeScope)
								.End
							))]"
			}
		}
	}

	type wgf_pressed_war_goal_list = dynamicgridbox {
		using = default_list_position
		datacontext = "[WarPanel.AccessWar.AccessDiplomaticPlay]"
		datamodel = "[DiplomaticPlay.MakeScope.GetList('wgf_active_war_goals_pressed')]"

		block "visiblity" {
			visible = no
		}

		item = {
			wgf_wargoal_item = {
				visible = "[ScriptedGui.IsShown(GuiScope
								.SetRoot(DiplomaticPlay.MakeScope)
								.AddScope('war_goal', BuildingType.MakeScope)
								.AddScope('target', DiplomaticPlay.GetTarget.MakeScope)
								.AddScope('initiator', DiplomaticPlay.GetInitiator.MakeScope)
								.End
							)]"
			}
		}
	}

	### Custom WARGOAL
	type wgf_wargoal_item = container {
		datacontext = "[GetScriptedGui('wgf_press_war_goal')]"
		datacontext = "[Scope.GetBuildingType]"
		datacontext = "[WarPanel.AccessWar.AccessDiplomaticPlay]"
		parentanchor = hcenter
		tooltip = wgf_war_goal_active_tooltip_primary
		onmousehierarchyenter = "[WarGoal.ShowHighlight]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no

		### PRESSED
		container = {
			visible = "[ScriptedGui.IsShown(GuiScope
							.SetRoot(DiplomaticPlay.MakeScope)
							.AddScope('war_goal', BuildingType.MakeScope)
							.AddScope('target', DiplomaticPlay.GetTarget.MakeScope)
							.AddScope('initiator', DiplomaticPlay.GetInitiator.MakeScope)
							.End
						)]"
			minimumsize = { 220 62 }
			maximumsize = { 220 -1 }

			button = {
				onclick = "[ScriptedGui.Execute(GuiScope
								.SetRoot(DiplomaticPlay.MakeScope)
								.AddScope('war_goal', BuildingType.MakeScope)
								.AddScope('target', DiplomaticPlay.GetTarget.MakeScope)
								.AddScope('initiator', DiplomaticPlay.GetInitiator.MakeScope)
								.End
							)]"
				using = default_button
				size = { 100% 100% }

				icon = {
					visible = no
					#todo add the below visible state instead when PRCAL-17690 is done:
					#visible = "[WarGoal.IsBeingHighlighted]"
					using = highlighted_square_selection
				}
			}

			flowcontainer = {
				direction = vertical
				margin_top = 5
				margin_bottom = 5
				parentanchor = center

				flowcontainer = {
					spacing = 10
					parentanchor = hcenter

					tiny_flag_no_interact = {
						datacontext = "[GetPlayer]"
						parentanchor = vcenter
					}
					icon = {
						size = { 30 30 }
						texture = "[BuildingType.GetIcon]"
						parentanchor = vcenter
					}
					tiny_flag_no_interact = {
						visible = "[Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, DiplomaticPlay.GetTarget.MakeScope))]"
						datacontext = "[DiplomaticPlay.GetTarget]"
						parentanchor = vcenter
					}
					tiny_flag_no_interact = {
						visible = "[Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, DiplomaticPlay.GetInitiator.MakeScope))]"
						datacontext = "[DiplomaticPlay.GetInitiator]"
						parentanchor = vcenter
					}
				}

				textbox = {
					multiline = yes
					autoresize = yes
					minimumsize = { 190 -1 }
					maximumsize = { 190 -1 }
					raw_text = "#BOLD [Localize('wgf_war_goal_name')]#!"
					align = center|nobaseline
					parentanchor = hcenter
				}
			}
		}

		### UNPRESSED
		container = {
			visible = "[Not(ScriptedGui.IsShown(GuiScope
							.SetRoot(DiplomaticPlay.MakeScope)
							.AddScope('war_goal', BuildingType.MakeScope)
							.AddScope('target', DiplomaticPlay.GetTarget.MakeScope)
							.AddScope('initiator', DiplomaticPlay.GetInitiator.MakeScope)
							.End
						))]"
			minimumsize = { 220 55 }
			maximumsize = { 220 -1 }
			alpha = 0.75

			button = {
				onclick = "[ScriptedGui.Execute(GuiScope
								.SetRoot(DiplomaticPlay.MakeScope)
								.AddScope('war_goal', BuildingType.MakeScope)
								.AddScope('target', DiplomaticPlay.GetTarget.MakeScope)
								.AddScope('initiator', DiplomaticPlay.GetInitiator.MakeScope)
								.End
							)]"
				using = default_button
				size = { 100% 100% }

				icon = {
					visible = no
					#todo add the below visible state instead when PRCAL-17690 is done:
					#visible = "[WarGoal.IsBeingHighlighted]"
					using = highlighted_square_selection
				}
			}

			flowcontainer = {
				direction = vertical
				margin_top = 5
				margin_bottom = 5
				parentanchor = center

				flowcontainer = {
					spacing = 10
					parentanchor = hcenter

					tiny_flag_no_interact = {
						datacontext = "[GetPlayer]"
						parentanchor = vcenter
					}
					icon = {
						size = { 30 30 }
						texture = "[BuildingType.GetIcon]"
						parentanchor = vcenter
					}
					tiny_flag_no_interact = {
						visible = "[Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, DiplomaticPlay.GetTarget.MakeScope))]"
						datacontext = "[DiplomaticPlay.GetTarget]"
						parentanchor = vcenter
					}
					tiny_flag_no_interact = {
						visible = "[Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.MakeScope, DiplomaticPlay.GetInitiator.MakeScope))]"
						datacontext = "[DiplomaticPlay.GetInitiator]"
						parentanchor = vcenter
					}
				}

				textbox = {
					multiline = yes
					autoresize = yes
					minimumsize = { 190 -1 }
					maximumsize = { 190 -1 }
					text = wgf_war_goal_name
					align = center|nobaseline
					parentanchor = hcenter
				}
			}
		}

		wgf_wargoal_checkmark = {}
	}
}
